{"version":3,"sources":["components/Button.js","components/Image.js","components/App.js","serviceWorker.js","index.js"],"names":["element","id","document","getElementById","Button","load","file_input","input","getElementsByTagName","files","length","img","i","reader","FileReader","onload","e","setAttribute","target","result","style","opacity","readAsDataURL","display","onChange","this","type","accept","multiple","React","Component","Image","alt","App","clip","x","container","closest","contains","nativeEvent","offsetX","touches","clientX","onTouchMove","onMouseMove","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAGIA,G,YAAU,SAACC,GAAD,OAAQC,SAASC,eAAeF,KAmC/BG,E,4MA/BXC,KAAO,WACH,IAAIC,EAAaN,EAAQ,cACrBO,EAAQD,EAAWE,qBAAqB,SAAS,GAErD,GAAGD,EAAME,OAASF,EAAME,MAAMC,QAAU,EAKpC,IAHA,IACIC,EADYX,EAAQ,aACJQ,qBAAqB,OAHH,WAK7BI,IACDC,EAAS,IAAIC,YACVC,OAAS,SAAUC,GACtBL,EAAIC,GAAGK,aAAa,MAAOD,EAAEE,OAAOC,QACpCR,EAAIC,GAAGQ,MAAMC,QAAU,GAE3BR,EAAOS,cAAcf,EAAME,MAAMG,KAN5BA,EAAE,EAAGA,EAAED,EAAID,OAAQE,IAAI,CAAC,IACzBC,EADwB,EAAvBD,GASbN,EAAWc,MAAMG,QAAU,Q,uDAI3B,OACI,yBAAKtB,GAAG,cACJ,0CACA,2BAAOuB,SAAUC,KAAKpB,KAAMqB,KAAK,OAAOC,OAAO,UAAUC,UAAQ,S,GA3B5DC,IAAMC,WCSZC,G,6KATX,OACE,oCACE,yBAAKC,IAAI,SACT,yBAAKA,IAAI,c,GALGH,IAAMC,YCEtB9B,EAAU,SAACC,GAAD,OAAQC,SAASC,eAAeF,IAqC/BgC,E,4MAjCbC,KAAO,SAAClB,GACN,IAAImB,EACAC,EAAYpC,EAAQ,aACpBW,EAAMyB,EAAU5B,qBAAqB,OAErCU,EAASF,EAAEE,OAAOmB,QAAQ,OAC9B,GAAKnB,GAAWkB,EAAUE,SAASpB,GAAnC,CAEA,IAEMiB,EADEnB,EAAEuB,YAAYC,QACZxB,EAAEuB,YAAYC,QAEdxB,EAAEyB,QAAQ,GAAGC,QAEtB,SAAO,OAER/B,EAAI,GAAGS,MAAMc,KAAb,kBAA+BC,EAA/B,gBACAxB,EAAI,GAAGS,MAAMc,KAAb,8BAA2CC,EAAE,EAA7C,S,uDAIA,OACE,yBAAKlC,GAAG,YACH0C,YAAalB,KAAKS,KAClBU,YAAanB,KAAKS,MAErB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA7BUL,IAAMC,WCKJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlD,SAASC,eAAe,SDyHpB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2257d2a.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Button.css';\n\nvar element = (id) => document.getElementById(id);\n\nclass Button extends React.Component {\n\n    load = () => {\n        var file_input = element('file_input');\n        var input = file_input.getElementsByTagName('input')[0];\n\n        if(input.files && input.files.length >= 0){\n\n            var container = element('container');\n            var img = container.getElementsByTagName('img');\n    \n            for (let i=0; i<img.length; i++){\n                var reader = new FileReader();\n                reader.onload = function (e) {\n                    img[i].setAttribute(\"src\", e.target.result);\n                    img[i].style.opacity = 1;\n                }\n                reader.readAsDataURL(input.files[i]);\n            }\n        }\n        file_input.style.display = 'none';\n    }\n\n    render(){\n        return(\n            <div id=\"file_input\">\n                <button>Upload</button>\n                <input onChange={this.load} type=\"file\" accept=\"image/*\" multiple/>\n            </div>\n        );\n    }\n}\n\nexport default Button;","import React from 'react';\nimport '../styles/Image.css';\n\nclass Image extends React.Component {\n  render(){\n    return(\n      <>\n        <img alt='img1'/>\n        <img alt='img2'/>\n      </>\n    );\n  }\n}\n\nexport default Image;","import React from 'react';\nimport '../styles/App.css';\nimport Button from './Button';\nimport Image from './Image';\n\nvar element = (id) => document.getElementById(id);\n\nclass App extends React.Component {\n\n  clip = (e) => {\n    var x;\n    var container = element('container');\n    var img = container.getElementsByTagName('img');\n\n    var target = e.target.closest('img');\n    if (!target || !container.contains(target)) return\n\n    try{\n        if (e.nativeEvent.offsetX){\n          x = e.nativeEvent.offsetX; // Desktop\n        }else{ \n          x = e.touches[0].clientX; // Mobile\n        }\n    }catch{ return }\n  \n    img[0].style.clip = `rect(0, ${x}px, auto, 0)`; \n    img[1].style.clip = `rect(0, auto, auto, ${x+3}px)`; \n  }\n\n  render(){\n    return(\n      <div id=\"container\" \n           onTouchMove={this.clip} \n           onMouseMove={this.clip}\n      > \n        <Image />\n        <Button />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}